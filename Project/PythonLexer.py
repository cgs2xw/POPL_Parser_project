# Generated from Python.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,21,130,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,5,
        1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,
        1,12,1,12,1,13,1,13,1,14,1,14,1,15,4,15,79,8,15,11,15,12,15,80,1,
        16,1,16,5,16,85,8,16,10,16,12,16,88,9,16,1,16,1,16,1,16,5,16,93,
        8,16,10,16,12,16,96,9,16,1,16,3,16,99,8,16,1,17,4,17,102,8,17,11,
        17,12,17,103,1,17,1,17,4,17,108,8,17,11,17,12,17,109,1,18,3,18,113,
        8,18,1,18,1,18,1,19,1,19,5,19,119,8,19,10,19,12,19,122,9,19,1,20,
        4,20,125,8,20,11,20,12,20,126,1,20,1,20,0,0,21,1,1,3,2,5,3,7,4,9,
        5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
        33,17,35,18,37,19,39,20,41,21,1,0,6,1,0,48,57,3,0,10,10,13,13,34,
        34,4,0,10,10,13,13,39,39,92,92,3,0,65,90,95,95,97,122,4,0,48,57,
        65,90,95,95,97,122,2,0,9,9,32,32,138,0,1,1,0,0,0,0,3,1,0,0,0,0,5,
        1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,
        0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,
        0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,
        0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,1,43,1,0,0,0,3,45,1,
        0,0,0,5,47,1,0,0,0,7,49,1,0,0,0,9,52,1,0,0,0,11,55,1,0,0,0,13,58,
        1,0,0,0,15,61,1,0,0,0,17,63,1,0,0,0,19,65,1,0,0,0,21,67,1,0,0,0,
        23,69,1,0,0,0,25,71,1,0,0,0,27,73,1,0,0,0,29,75,1,0,0,0,31,78,1,
        0,0,0,33,98,1,0,0,0,35,101,1,0,0,0,37,112,1,0,0,0,39,116,1,0,0,0,
        41,124,1,0,0,0,43,44,5,40,0,0,44,2,1,0,0,0,45,46,5,41,0,0,46,4,1,
        0,0,0,47,48,5,61,0,0,48,6,1,0,0,0,49,50,5,43,0,0,50,51,5,61,0,0,
        51,8,1,0,0,0,52,53,5,45,0,0,53,54,5,61,0,0,54,10,1,0,0,0,55,56,5,
        42,0,0,56,57,5,61,0,0,57,12,1,0,0,0,58,59,5,47,0,0,59,60,5,61,0,
        0,60,14,1,0,0,0,61,62,5,91,0,0,62,16,1,0,0,0,63,64,5,93,0,0,64,18,
        1,0,0,0,65,66,5,44,0,0,66,20,1,0,0,0,67,68,5,42,0,0,68,22,1,0,0,
        0,69,70,5,47,0,0,70,24,1,0,0,0,71,72,5,43,0,0,72,26,1,0,0,0,73,74,
        5,45,0,0,74,28,1,0,0,0,75,76,5,37,0,0,76,30,1,0,0,0,77,79,7,0,0,
        0,78,77,1,0,0,0,79,80,1,0,0,0,80,78,1,0,0,0,80,81,1,0,0,0,81,32,
        1,0,0,0,82,86,5,34,0,0,83,85,8,1,0,0,84,83,1,0,0,0,85,88,1,0,0,0,
        86,84,1,0,0,0,86,87,1,0,0,0,87,89,1,0,0,0,88,86,1,0,0,0,89,99,5,
        34,0,0,90,94,5,39,0,0,91,93,8,2,0,0,92,91,1,0,0,0,93,96,1,0,0,0,
        94,92,1,0,0,0,94,95,1,0,0,0,95,97,1,0,0,0,96,94,1,0,0,0,97,99,5,
        39,0,0,98,82,1,0,0,0,98,90,1,0,0,0,99,34,1,0,0,0,100,102,7,0,0,0,
        101,100,1,0,0,0,102,103,1,0,0,0,103,101,1,0,0,0,103,104,1,0,0,0,
        104,105,1,0,0,0,105,107,5,46,0,0,106,108,7,0,0,0,107,106,1,0,0,0,
        108,109,1,0,0,0,109,107,1,0,0,0,109,110,1,0,0,0,110,36,1,0,0,0,111,
        113,5,13,0,0,112,111,1,0,0,0,112,113,1,0,0,0,113,114,1,0,0,0,114,
        115,5,10,0,0,115,38,1,0,0,0,116,120,7,3,0,0,117,119,7,4,0,0,118,
        117,1,0,0,0,119,122,1,0,0,0,120,118,1,0,0,0,120,121,1,0,0,0,121,
        40,1,0,0,0,122,120,1,0,0,0,123,125,7,5,0,0,124,123,1,0,0,0,125,126,
        1,0,0,0,126,124,1,0,0,0,126,127,1,0,0,0,127,128,1,0,0,0,128,129,
        6,20,0,0,129,42,1,0,0,0,10,0,80,86,94,98,103,109,112,120,126,1,6,
        0,0
    ]

class PythonLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    MULT = 11
    DIV = 12
    ADD = 13
    SUB = 14
    MOD = 15
    INT = 16
    STRING = 17
    FLOAT = 18
    NEWLINE = 19
    VAR = 20
    WS = 21

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'='", "'+='", "'-='", "'*='", "'/='", "'['", 
            "']'", "','", "'*'", "'/'", "'+'", "'-'", "'%'" ]

    symbolicNames = [ "<INVALID>",
            "MULT", "DIV", "ADD", "SUB", "MOD", "INT", "STRING", "FLOAT", 
            "NEWLINE", "VAR", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "MULT", "DIV", "ADD", "SUB", "MOD", 
                  "INT", "STRING", "FLOAT", "NEWLINE", "VAR", "WS" ]

    grammarFileName = "Python.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


